require "pry"
# Project Euler

# Problem 1: Multiples of 3 and 5
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
# The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

def multiples_of_three_and_five
  @sum = 0
  (1...1000).each do |num|
    if num%3 == 0 || num%5 == 0
      @sum += num
      puts num
    end
  end
  puts @sum
end

# Problem 2: Even Fibonacci numbers
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
#  By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence
#  whose values do not exceed four million, find the sum of the even-valued terms.

def even_fibonacci_numbers_sum
  @even_sum = 0
  y = 0
  x = 1
  while x < 4000000 || y < 4000000
    if x % 2 == 0
      @even_sum += x
      # puts x
    elsif y % 2 == 0
      @even_sum += y
      # puts y
    end
    y += x
    x += y
  end
  puts @even_sum
end

# Problem 3: Largest prime factorization
# The prime factors of 13195 are 5, 7, 13 and 29.

# What is the largest prime factor of the number 600851475143 ?
# based on quadratic sieve
def find_largest_prime(target)
  @factor_array = []
  (3..(Math.sqrt(target).ceil)).each {|number| @factor_array << number if  target % number == 0}
  largest_prime_factor(@factor_array)
end

def is_prime_factor(array)
  @number = array.pop
  array.each do |factor| 
    if @number % factor == 0
      return false
    end
  end
  @highest_prime_number = @number
end

def largest_prime_factor(array)
  @factor_array = array
  @highest_prime_number = 0
  while @highest_prime_number == 0
    is_prime_factor(@factor_array)
  end
  puts @number
end
